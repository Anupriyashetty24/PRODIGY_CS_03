import re

def assess_password_strength(password):
    # Criteria weights
    length_weight = 2
    case_weight = 1.5
    number_weight = 1.5
    special_char_weight = 2

    # Initialize score
    score = 0

    # Assess password length
    if len(password) >= 8:
        score += length_weight
    if len(password) >= 12:
        score += length_weight

    # Check for uppercase and lowercase letters
    if re.search(r'[A-Z]', password) and re.search(r'[a-z]', password):
        score += case_weight

    # Check for numbers
    if re.search(r'\d', password):
        score += number_weight

    # Check for special characters
    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        score += special_char_weight

    # Determine strength based on score
    if score >= 7:
        strength = "Strong"
    elif 5 <= score < 7:
        strength = "Moderate"
    else:
        strength = "Weak"

    # Provide feedback
    feedback = []
    if len(password) < 8:
        feedback.append("Your password is too short. Consider making it at least 8 characters long.")
    if not re.search(r'[A-Z]', password) or not re.search(r'[a-z]', password):
        feedback.append("Consider using a mix of uppercase and lowercase letters.")
    if not re.search(r'\d', password):
        feedback.append("Consider adding some numbers to your password.")
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        feedback.append("Consider adding special characters to make your password stronger.")

    return strength, feedback

# Example usage
password = input("Enter your password: ")
strength, feedback = assess_password_strength(password)

print(f"Password Strength: {strength}")
if feedback:
    print("Suggestions to improve your password:")
    for tip in feedback:
        print(f"- {tip}")
